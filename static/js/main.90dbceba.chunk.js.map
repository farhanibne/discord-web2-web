{"version":3,"sources":["ChatHeader.js","features/appSlice.js","features/userSlice.js","firebase.js","Message.js","Chat.js","SidebarChannel.js","Sibebar.js","Login.js","Id.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Message","timestamp","message","Avatar","src","photo","displayName","Date","toDate","toLocaleString","Chat","useSelector","useState","messages","setMessages","input","setInput","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","messsage","AddCircle","value","onChange","e","target","placeholder","onClick","preventDefault","add","FieldValue","serverTimestamp","disabled","type","SidebarChannel","id","dispatch","useDispatch","Sibebar","channels","setChannels","channel","prompt","Login","Button","signInWithPopup","console","log","Id","signOut","uid","substring","App","onAuthStateChanged","authUser","photoURL","email","style","display","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90dbceba.chunk.js","sourcesContent":["import { EditLocation, HelpRounded, Notifications, PeopleAltRounded, SearchRounded, SendRounded } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport './ChatHeader.css'\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className = \"chatHeader\">\r\n            <div className = \"chatHeader__left\">\r\n                <h3>\r\n                    <span className = \"chatHeader__hash\">\r\n                        #\r\n                    </span>\r\n                        {channelName}\r\n                </h3>\r\n            </div>\r\n            <div className = \"chatHeader__right\">\r\n                {/* <Notifications /> */}\r\n                {/* <EditLocation /> */}\r\n                {/* <PeopleAltRounded /> */}\r\n\r\n                {/* <div className = \"chatHeader__search\"> */}\r\n                    {/* <input placeholder = \"search\" /> */}\r\n                    {/* <SearchRounded /> */}\r\n                {/* </div> */}\r\n                {/* <SendRounded /> */}\r\n                {/* <HelpRounded > */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo : (state, action) => {\r\n      state.channelId = action.payload.channelId\r\n      state.channelName = action.payload.channelName\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null\r\n  },\r\n  reducers: {\r\n    login : (state, action) => {\r\n      state.user = action.payload\r\n    },\r\n    logout: (state) => {\r\n      state.user = null  \r\n    }\r\n  }\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase'\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDp5e8AGaVOhLJQysYBduDdndWa2ekrquM\",\r\n  authDomain: \"discord-dz.firebaseapp.com\",\r\n  projectId: \"discord-dz\",\r\n  storageBucket: \"discord-dz.appspot.com\",\r\n  messagingSenderId: \"665215399873\",\r\n  appId: \"1:665215399873:web:a053d38cb1f625b3a9e140\",\r\n  measurementId: \"G-V1CTD61PTD\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db =  firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { auth, provider }\r\n  export default db ","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nfunction Message( { timestamp, message, user }) {\r\n    return (\r\n        <div className = \"message\">\r\n            <Avatar \r\n                src = {user.photo}\r\n            />\r\n            <div className ='message__info'>\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className = \"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toLocaleString()}\r\n                    </span>\r\n                </h4>\r\n                    <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { AddCircle, CardGiftcard, EmojiEmotions, Gif } from '@material-ui/icons'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader'\r\nimport { selectChannelId, selectChannelName } from './features/appSlice'\r\nimport { selectUser } from './features/userSlice'\r\nimport db from './firebase'\r\nimport Message from './Message'\r\nimport firebase from 'firebase'\r\n\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectChannelId)\r\n    const channelName = useSelector(selectChannelName)\r\n    const [messages, setMessages] = useState([])\r\n    const [input, setInput] = useState('')\r\n\r\n    useEffect(() => {\r\n        if(channelId){\r\n            db.collection('channels')\r\n            .doc(channelId)\r\n            .collection('messages')\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .onSnapshot((snapshot) => \r\n            setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            )\r\n        }\r\n    }, [channelId])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            user: user,\r\n            messsage: input,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n\r\n        setInput('')\r\n    }\r\n\r\n    return (\r\n        <div className = \"chat\">\r\n            <ChatHeader \r\n                channelName = {channelName}\r\n            />\r\n\r\n            <div className = \"chat__messages\">\r\n                { messages.map((message) => (\r\n                    <Message \r\n                        timestamp = {message.timestamp}\r\n                        message = {message.messsage}\r\n                        user = {message.user}\r\n                    />\r\n                ))}\r\n                \r\n\r\n            </div>\r\n            <div className = \"chat__input\">\r\n                <AddCircle />\r\n                <form>\r\n                    <input \r\n                    value = {input}\r\n                    onChange = {(e) => setInput(e.target.value)}\r\n                    placeholder = {`message #${channelName}`}/>\r\n                    <button \r\n                    onClick = {sendMessage}\r\n                    disabled = {!channelId}\r\n                    className = \"chat__inputButton\"\r\n                    type = \"submit\">\r\n                        send\r\n                    </button>\r\n                </form>\r\n                {/* <div className = \"chat__inputIcons\">\r\n                    <CardGiftcard fontSize\r\n                    = \"large\"/>\r\n                    <Gif fontSize = \"large\" />\r\n                    <EmojiEmotions fontSize = \"large\" />\r\n            </div> */}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport './SidebarChannel.css'\r\n\r\nconst SidebarChannel = ({ id, channelName}) => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className = \"sidebarChannel\" onClick = { () => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName\r\n        }))}>\r\n            <h4>\r\n                <span className = \"sidebarChannel__hash\">\r\n                    #\r\n                </span>{ channelName }\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport  InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport HeadSetIcon from '@material-ui/icons/Headset'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport { auth } from './firebase'\r\nimport db from './firebase'\r\n\r\n\r\nfunction Sibebar() {\r\n    const user = useSelector(selectUser)\r\n    const [channels, setChannels ] = useState([])\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => (\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                channel: doc.data()\r\n            })))\r\n        ))\r\n    }, [])\r\n\r\n    const handleChannel = () => {\r\n        const channelName = prompt('Enter a channel name')\r\n        if(channelName){\r\n            db.collection('channels').add({\r\n                channelName: channelName\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className = \"sidebar\">\r\n            <div className = \"sidebar__top\">\r\n                <h3>{user.displayName}</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className = \"sidebar__channels\">\r\n                <div className = \"sidebar__channelsHeader\">\r\n                    <div className = \"sidebar__header\">\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon \r\n                        onClick = {handleChannel}\r\n                        className = \"sidebar__addChannel\" />\r\n                </div>\r\n                <div className = \"sidebar__channelsList\">\r\n                    { channels.map(({ id, channel}) => (\r\n                        <SidebarChannel\r\n                            key = {id}\r\n                            id = {id}\r\n                            channelName = {channel.channelName}\r\n                        />\r\n                    ))}\r\n            </div>\r\n            </div> \r\n         \r\n      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sibebar\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Login.css'\r\nimport { auth, provider } from './firebase'\r\n\r\nfunction Login() {\r\n    const signIn = (e) => {\r\n       auth.signInWithPopup(provider)\r\n       console.log('Login')\r\n    }\r\n    return (\r\n        <div className = \"login\">\r\n            <div className = \"login__logo\">\r\n\r\n                <h1>DZ discord</h1>\r\n                {/* <img \r\n                    src = \"https://upload.wikimedia.org/wikipedia/en/thumb/9/98/Discord_logo.svg/233px-Discord_logo.svg.png\"\r\n                    alt = \"\"\r\n                /> */}\r\n                {/* <h2>Design and developed by DZ</h2> */}\r\n            </div>\r\n            <Button \r\n                onClick = {signIn}\r\n                className = \"login__button\">Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport  InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport HeadSetIcon from '@material-ui/icons/Headset'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport { auth } from './firebase'\r\nimport db from './firebase'\r\n\r\nfunction Id() {\r\n\r\n    const user = useSelector(selectUser)\r\n    const [channels, setChannels ] = useState([])\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => (\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                channel: doc.data()\r\n            })))\r\n        ))\r\n    }, [])\r\n\r\n    const handleChannel = () => {\r\n        const channelName = prompt('Enter a channel name')\r\n        if(channelName){\r\n            db.collection('channels').add({\r\n                channelName: channelName\r\n            })\r\n        }\r\n    }\r\n    \r\n  return (\r\n    <div className = 'sidebar__profile'>\r\n    <Avatar \r\n        className = \"sidebar__profileAvatar\"\r\n        onClick = { () => auth.signOut()}\r\n        src = {user.photo}\r\n    />\r\n    <div className = \"sidebar__profileInfo\">\r\n        <h3>{user.displayName}</h3>\r\n        <p>#{user.uid.substring(0 , 5)}</p>\r\n    </div>\r\n    <div className = \"sidebar__profileIcons\">\r\n        <MicIcon />\r\n        <HeadSetIcon />\r\n        <SettingsIcon />\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Id","import Chat from './Chat';\r\nimport React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sibebar'\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Login from './Login';\r\nimport {auth} from './firebase'\r\nimport Id from './Id';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser);\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      console.log('user is' ,authUser)\r\n      if(authUser){\r\n        dispatch( login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName\r\n        })\r\n        )\r\n      } else{\r\n        //log out\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      { user ? (\r\n        <>\r\n        <div style={{display:'flex'}}>\r\n        <Sidebar />\r\n        <Chat />\r\n        </div>\r\n        <Id/>\r\n        </>\r\n       \r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}